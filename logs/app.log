2024-11-17 10:31:06,564 - INFO - Cleared the Neo4j database.
2024-11-17 10:31:06,564 - INFO - Cleared the Neo4j database.
2024-11-17 10:31:06,564 - INFO - Cleared the Neo4j database.
2024-11-17 10:31:06,574 - INFO - Starting the code parsing for ./code_base
2024-11-17 10:31:06,574 - INFO - Starting the code parsing for ./code_base
2024-11-17 10:31:06,574 - INFO - Starting the code parsing for ./code_base
2024-11-17 10:31:06,574 - INFO - Starting the code parsing for ./code_base
2024-11-17 10:31:06,722 - INFO - Cleared the Neo4j database.
2024-11-17 10:31:06,722 - INFO - Cleared the Neo4j database.
2024-11-17 10:31:06,722 - INFO - Cleared the Neo4j database.
2024-11-17 10:31:06,722 - INFO - Cleared the Neo4j database.
2024-11-17 10:31:06,723 - INFO - Started parsing the codebase at: C:\Code\Github\RAG_code\code_base
2024-11-17 10:31:06,723 - INFO - Started parsing the codebase at: C:\Code\Github\RAG_code\code_base
2024-11-17 10:31:06,723 - INFO - Started parsing the codebase at: C:\Code\Github\RAG_code\code_base
2024-11-17 10:31:06,723 - INFO - Started parsing the codebase at: C:\Code\Github\RAG_code\code_base
2024-11-17 10:31:06,724 - DEBUG - Found Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,724 - DEBUG - Found Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,724 - DEBUG - Found Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,724 - DEBUG - Found Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,724 - INFO - Parsing Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,724 - INFO - Parsing Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,724 - INFO - Parsing Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,724 - INFO - Parsing Python file: ./code_base\llama-index-core\llama_index\core\async_utils.py
2024-11-17 10:31:06,727 - DEBUG - AST Tree for ./code_base\llama-index-core\llama_index\core\async_utils.py: Module(body=[Expr(value=Constant(value='Async utils.')), Import(names=[alias(name='asyncio')]), ImportFrom(module='itertools', names=[alias(name='zip_longest')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Coroutine'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='TypeVar')], level=0), Import(names=[alias(name='llama_index.core.instrumentation', asname='instrument')]), Assign(targets=[Name(id='dispatcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='instrument', ctx=Load()), attr='get_dispatcher', ctx=Load()), args=[Name(id='__name__', ctx=Load())])), FunctionDef(name='asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), FunctionDef(name='asyncio_run', args=arguments(args=[arg(arg='coro', annotation=Name(id='Coroutine', ctx=Load()))]), body=[Expr(value=Constant(value='Gets an existing event loop to run the coroutine.\n\n    If there is no existing event loop, creates a new one.\n    ')), Try(body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), Return(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Detected nested async. Please use nest_asyncio.apply() to allow nested event loops.Or, use async entry methods like `aquery()`, `aretriever`, `achat`, etc.')]))])])])])], returns=Name(id='Any', ctx=Load())), FunctionDef(name='run_async_tasks', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='progress_bar_desc', annotation=Name(id='str', ctx=Load()))], defaults=[Constant(value=False), Constant(value='Running async tasks')]), body=[Expr(value=Constant(value='Run a list of async tasks.')), AnnAssign(target=Name(id='tasks_to_execute', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Name(id='tasks', ctx=Load()), simple=1), If(test=Name(id='show_progress', ctx=Load()), body=[Try(body=[Import(names=[alias(name='nest_asyncio')]), ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm')], level=0), Expr(value=Call(func=Attribute(value=Name(id='nest_asyncio', ctx=Load()), attr='apply', ctx=Load()))), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), AsyncFunctionDef(name='_tqdm_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='progress_bar_desc', ctx=Load()))])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='tqdm_outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Call(func=Name(id='_tqdm_gather', ctx=Load()))]), simple=1), Return(value=Name(id='tqdm_outputs', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])])]), AsyncFunctionDef(name='_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Name(id='asyncio_run', ctx=Load()), args=[Call(func=Name(id='_gather', ctx=Load()))]), simple=1), Return(value=Name(id='outputs', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='chunks', args=arguments(args=[arg(arg='iterable', annotation=Name(id='Iterable', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='iterable', ctx=Load())])], ctx=Load()), op=Mult(), right=Name(id='size', ctx=Load()))), Return(value=Call(func=Name(id='zip_longest', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='fillvalue', value=Constant(value=None))]))], returns=Name(id='Iterable', ctx=Load())), AsyncFunctionDef(name='batch_gather', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=10), Constant(value=False)]), body=[AnnAssign(target=Name(id='output', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=List(ctx=Load()), simple=1), For(target=Name(id='task_chunk', ctx=Store()), iter=Call(func=Name(id='chunks', ctx=Load()), args=[Name(id='tasks', ctx=Load()), Name(id='batch_size', ctx=Load())]), body=[Assign(targets=[Name(id='task_chunk', ctx=Store())], value=GeneratorExp(elt=Name(id='task', ctx=Load()), generators=[comprehension(target=Name(id='task', ctx=Store()), iter=Name(id='task_chunk', ctx=Load()), ifs=[Compare(left=Name(id='task', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Assign(targets=[Name(id='output_chunk', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='task_chunk', ctx=Load()), ctx=Load())]))), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='output_chunk', ctx=Load())])), If(test=Name(id='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Completed '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='output', ctx=Load())]), conversion=-1), Constant(value=' out of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tasks', ctx=Load())]), conversion=-1), Constant(value=' tasks')])]))])]), Return(value=Name(id='output', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='get_asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='DEFAULT_NUM_WORKERS', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')])), AsyncFunctionDef(name='run_jobs', args=arguments(args=[arg(arg='jobs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='workers', annotation=Name(id='int', ctx=Load())), arg(arg='desc', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], defaults=[Constant(value=False), Name(id='DEFAULT_NUM_WORKERS', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='Run jobs.\n\n    Args:\n        jobs (List[Coroutine]):\n            List of jobs to run.\n        show_progress (bool):\n            Whether to show progress bar.\n\n    Returns:\n        List[Any]:\n            List of results.\n    ')), Assign(targets=[Name(id='semaphore', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Semaphore', ctx=Load()), args=[Name(id='workers', ctx=Load())])), AsyncFunctionDef(name='worker', args=arguments(args=[arg(arg='job', annotation=Name(id='Coroutine', ctx=Load()))]), body=[AsyncWith(items=[withitem(context_expr=Name(id='semaphore', ctx=Load()))], body=[Return(value=Await(value=Name(id='job', ctx=Load())))])], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='pool_jobs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='worker', ctx=Load()), args=[Name(id='job', ctx=Load())]), generators=[comprehension(target=Name(id='job', ctx=Store()), iter=Name(id='jobs', ctx=Load()), is_async=0)])), If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='tqdm_asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='desc', ctx=Load()))])))], orelse=[Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())])))]), Return(value=Name(id='results', ctx=Load()))], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))])
2024-11-17 10:31:06,727 - DEBUG - AST Tree for ./code_base\llama-index-core\llama_index\core\async_utils.py: Module(body=[Expr(value=Constant(value='Async utils.')), Import(names=[alias(name='asyncio')]), ImportFrom(module='itertools', names=[alias(name='zip_longest')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Coroutine'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='TypeVar')], level=0), Import(names=[alias(name='llama_index.core.instrumentation', asname='instrument')]), Assign(targets=[Name(id='dispatcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='instrument', ctx=Load()), attr='get_dispatcher', ctx=Load()), args=[Name(id='__name__', ctx=Load())])), FunctionDef(name='asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), FunctionDef(name='asyncio_run', args=arguments(args=[arg(arg='coro', annotation=Name(id='Coroutine', ctx=Load()))]), body=[Expr(value=Constant(value='Gets an existing event loop to run the coroutine.\n\n    If there is no existing event loop, creates a new one.\n    ')), Try(body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), Return(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Detected nested async. Please use nest_asyncio.apply() to allow nested event loops.Or, use async entry methods like `aquery()`, `aretriever`, `achat`, etc.')]))])])])])], returns=Name(id='Any', ctx=Load())), FunctionDef(name='run_async_tasks', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='progress_bar_desc', annotation=Name(id='str', ctx=Load()))], defaults=[Constant(value=False), Constant(value='Running async tasks')]), body=[Expr(value=Constant(value='Run a list of async tasks.')), AnnAssign(target=Name(id='tasks_to_execute', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Name(id='tasks', ctx=Load()), simple=1), If(test=Name(id='show_progress', ctx=Load()), body=[Try(body=[Import(names=[alias(name='nest_asyncio')]), ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm')], level=0), Expr(value=Call(func=Attribute(value=Name(id='nest_asyncio', ctx=Load()), attr='apply', ctx=Load()))), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), AsyncFunctionDef(name='_tqdm_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='progress_bar_desc', ctx=Load()))])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='tqdm_outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Call(func=Name(id='_tqdm_gather', ctx=Load()))]), simple=1), Return(value=Name(id='tqdm_outputs', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])])]), AsyncFunctionDef(name='_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Name(id='asyncio_run', ctx=Load()), args=[Call(func=Name(id='_gather', ctx=Load()))]), simple=1), Return(value=Name(id='outputs', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='chunks', args=arguments(args=[arg(arg='iterable', annotation=Name(id='Iterable', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='iterable', ctx=Load())])], ctx=Load()), op=Mult(), right=Name(id='size', ctx=Load()))), Return(value=Call(func=Name(id='zip_longest', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='fillvalue', value=Constant(value=None))]))], returns=Name(id='Iterable', ctx=Load())), AsyncFunctionDef(name='batch_gather', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=10), Constant(value=False)]), body=[AnnAssign(target=Name(id='output', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=List(ctx=Load()), simple=1), For(target=Name(id='task_chunk', ctx=Store()), iter=Call(func=Name(id='chunks', ctx=Load()), args=[Name(id='tasks', ctx=Load()), Name(id='batch_size', ctx=Load())]), body=[Assign(targets=[Name(id='task_chunk', ctx=Store())], value=GeneratorExp(elt=Name(id='task', ctx=Load()), generators=[comprehension(target=Name(id='task', ctx=Store()), iter=Name(id='task_chunk', ctx=Load()), ifs=[Compare(left=Name(id='task', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Assign(targets=[Name(id='output_chunk', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='task_chunk', ctx=Load()), ctx=Load())]))), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='output_chunk', ctx=Load())])), If(test=Name(id='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Completed '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='output', ctx=Load())]), conversion=-1), Constant(value=' out of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tasks', ctx=Load())]), conversion=-1), Constant(value=' tasks')])]))])]), Return(value=Name(id='output', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='get_asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='DEFAULT_NUM_WORKERS', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')])), AsyncFunctionDef(name='run_jobs', args=arguments(args=[arg(arg='jobs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='workers', annotation=Name(id='int', ctx=Load())), arg(arg='desc', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], defaults=[Constant(value=False), Name(id='DEFAULT_NUM_WORKERS', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='Run jobs.\n\n    Args:\n        jobs (List[Coroutine]):\n            List of jobs to run.\n        show_progress (bool):\n            Whether to show progress bar.\n\n    Returns:\n        List[Any]:\n            List of results.\n    ')), Assign(targets=[Name(id='semaphore', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Semaphore', ctx=Load()), args=[Name(id='workers', ctx=Load())])), AsyncFunctionDef(name='worker', args=arguments(args=[arg(arg='job', annotation=Name(id='Coroutine', ctx=Load()))]), body=[AsyncWith(items=[withitem(context_expr=Name(id='semaphore', ctx=Load()))], body=[Return(value=Await(value=Name(id='job', ctx=Load())))])], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='pool_jobs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='worker', ctx=Load()), args=[Name(id='job', ctx=Load())]), generators=[comprehension(target=Name(id='job', ctx=Store()), iter=Name(id='jobs', ctx=Load()), is_async=0)])), If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='tqdm_asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='desc', ctx=Load()))])))], orelse=[Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())])))]), Return(value=Name(id='results', ctx=Load()))], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))])
2024-11-17 10:31:06,727 - DEBUG - AST Tree for ./code_base\llama-index-core\llama_index\core\async_utils.py: Module(body=[Expr(value=Constant(value='Async utils.')), Import(names=[alias(name='asyncio')]), ImportFrom(module='itertools', names=[alias(name='zip_longest')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Coroutine'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='TypeVar')], level=0), Import(names=[alias(name='llama_index.core.instrumentation', asname='instrument')]), Assign(targets=[Name(id='dispatcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='instrument', ctx=Load()), attr='get_dispatcher', ctx=Load()), args=[Name(id='__name__', ctx=Load())])), FunctionDef(name='asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), FunctionDef(name='asyncio_run', args=arguments(args=[arg(arg='coro', annotation=Name(id='Coroutine', ctx=Load()))]), body=[Expr(value=Constant(value='Gets an existing event loop to run the coroutine.\n\n    If there is no existing event loop, creates a new one.\n    ')), Try(body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), Return(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Detected nested async. Please use nest_asyncio.apply() to allow nested event loops.Or, use async entry methods like `aquery()`, `aretriever`, `achat`, etc.')]))])])])])], returns=Name(id='Any', ctx=Load())), FunctionDef(name='run_async_tasks', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='progress_bar_desc', annotation=Name(id='str', ctx=Load()))], defaults=[Constant(value=False), Constant(value='Running async tasks')]), body=[Expr(value=Constant(value='Run a list of async tasks.')), AnnAssign(target=Name(id='tasks_to_execute', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Name(id='tasks', ctx=Load()), simple=1), If(test=Name(id='show_progress', ctx=Load()), body=[Try(body=[Import(names=[alias(name='nest_asyncio')]), ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm')], level=0), Expr(value=Call(func=Attribute(value=Name(id='nest_asyncio', ctx=Load()), attr='apply', ctx=Load()))), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), AsyncFunctionDef(name='_tqdm_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='progress_bar_desc', ctx=Load()))])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='tqdm_outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Call(func=Name(id='_tqdm_gather', ctx=Load()))]), simple=1), Return(value=Name(id='tqdm_outputs', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])])]), AsyncFunctionDef(name='_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Name(id='asyncio_run', ctx=Load()), args=[Call(func=Name(id='_gather', ctx=Load()))]), simple=1), Return(value=Name(id='outputs', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='chunks', args=arguments(args=[arg(arg='iterable', annotation=Name(id='Iterable', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='iterable', ctx=Load())])], ctx=Load()), op=Mult(), right=Name(id='size', ctx=Load()))), Return(value=Call(func=Name(id='zip_longest', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='fillvalue', value=Constant(value=None))]))], returns=Name(id='Iterable', ctx=Load())), AsyncFunctionDef(name='batch_gather', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=10), Constant(value=False)]), body=[AnnAssign(target=Name(id='output', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=List(ctx=Load()), simple=1), For(target=Name(id='task_chunk', ctx=Store()), iter=Call(func=Name(id='chunks', ctx=Load()), args=[Name(id='tasks', ctx=Load()), Name(id='batch_size', ctx=Load())]), body=[Assign(targets=[Name(id='task_chunk', ctx=Store())], value=GeneratorExp(elt=Name(id='task', ctx=Load()), generators=[comprehension(target=Name(id='task', ctx=Store()), iter=Name(id='task_chunk', ctx=Load()), ifs=[Compare(left=Name(id='task', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Assign(targets=[Name(id='output_chunk', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='task_chunk', ctx=Load()), ctx=Load())]))), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='output_chunk', ctx=Load())])), If(test=Name(id='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Completed '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='output', ctx=Load())]), conversion=-1), Constant(value=' out of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tasks', ctx=Load())]), conversion=-1), Constant(value=' tasks')])]))])]), Return(value=Name(id='output', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='get_asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='DEFAULT_NUM_WORKERS', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')])), AsyncFunctionDef(name='run_jobs', args=arguments(args=[arg(arg='jobs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='workers', annotation=Name(id='int', ctx=Load())), arg(arg='desc', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], defaults=[Constant(value=False), Name(id='DEFAULT_NUM_WORKERS', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='Run jobs.\n\n    Args:\n        jobs (List[Coroutine]):\n            List of jobs to run.\n        show_progress (bool):\n            Whether to show progress bar.\n\n    Returns:\n        List[Any]:\n            List of results.\n    ')), Assign(targets=[Name(id='semaphore', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Semaphore', ctx=Load()), args=[Name(id='workers', ctx=Load())])), AsyncFunctionDef(name='worker', args=arguments(args=[arg(arg='job', annotation=Name(id='Coroutine', ctx=Load()))]), body=[AsyncWith(items=[withitem(context_expr=Name(id='semaphore', ctx=Load()))], body=[Return(value=Await(value=Name(id='job', ctx=Load())))])], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='pool_jobs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='worker', ctx=Load()), args=[Name(id='job', ctx=Load())]), generators=[comprehension(target=Name(id='job', ctx=Store()), iter=Name(id='jobs', ctx=Load()), is_async=0)])), If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='tqdm_asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='desc', ctx=Load()))])))], orelse=[Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())])))]), Return(value=Name(id='results', ctx=Load()))], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))])
2024-11-17 10:31:06,727 - DEBUG - AST Tree for ./code_base\llama-index-core\llama_index\core\async_utils.py: Module(body=[Expr(value=Constant(value='Async utils.')), Import(names=[alias(name='asyncio')]), ImportFrom(module='itertools', names=[alias(name='zip_longest')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Coroutine'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='TypeVar')], level=0), Import(names=[alias(name='llama_index.core.instrumentation', asname='instrument')]), Assign(targets=[Name(id='dispatcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='instrument', ctx=Load()), attr='get_dispatcher', ctx=Load()), args=[Name(id='__name__', ctx=Load())])), FunctionDef(name='asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), FunctionDef(name='asyncio_run', args=arguments(args=[arg(arg='coro', annotation=Name(id='Coroutine', ctx=Load()))]), body=[Expr(value=Constant(value='Gets an existing event loop to run the coroutine.\n\n    If there is no existing event loop, creates a new one.\n    ')), Try(body=[Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), Return(value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='coro', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Detected nested async. Please use nest_asyncio.apply() to allow nested event loops.Or, use async entry methods like `aquery()`, `aretriever`, `achat`, etc.')]))])])])])], returns=Name(id='Any', ctx=Load())), FunctionDef(name='run_async_tasks', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='progress_bar_desc', annotation=Name(id='str', ctx=Load()))], defaults=[Constant(value=False), Constant(value='Running async tasks')]), body=[Expr(value=Constant(value='Run a list of async tasks.')), AnnAssign(target=Name(id='tasks_to_execute', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Name(id='tasks', ctx=Load()), simple=1), If(test=Name(id='show_progress', ctx=Load()), body=[Try(body=[Import(names=[alias(name='nest_asyncio')]), ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm')], level=0), Expr(value=Call(func=Attribute(value=Name(id='nest_asyncio', ctx=Load()), attr='apply', ctx=Load()))), Assign(targets=[Name(id='loop', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='get_event_loop', ctx=Load()))), AsyncFunctionDef(name='_tqdm_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='tqdm', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='progress_bar_desc', ctx=Load()))])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='tqdm_outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='loop', ctx=Load()), attr='run_until_complete', ctx=Load()), args=[Call(func=Name(id='_tqdm_gather', ctx=Load()))]), simple=1), Return(value=Name(id='tqdm_outputs', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])])]), AsyncFunctionDef(name='_gather', args=arguments(), body=[Return(value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='tasks_to_execute', ctx=Load()), ctx=Load())])))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='outputs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Name(id='asyncio_run', ctx=Load()), args=[Call(func=Name(id='_gather', ctx=Load()))]), simple=1), Return(value=Name(id='outputs', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='chunks', args=arguments(args=[arg(arg='iterable', annotation=Name(id='Iterable', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='iterable', ctx=Load())])], ctx=Load()), op=Mult(), right=Name(id='size', ctx=Load()))), Return(value=Call(func=Name(id='zip_longest', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='fillvalue', value=Constant(value=None))]))], returns=Name(id='Iterable', ctx=Load())), AsyncFunctionDef(name='batch_gather', args=arguments(args=[arg(arg='tasks', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Coroutine', ctx=Load()), ctx=Load())), arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=10), Constant(value=False)]), body=[AnnAssign(target=Name(id='output', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=List(ctx=Load()), simple=1), For(target=Name(id='task_chunk', ctx=Store()), iter=Call(func=Name(id='chunks', ctx=Load()), args=[Name(id='tasks', ctx=Load()), Name(id='batch_size', ctx=Load())]), body=[Assign(targets=[Name(id='task_chunk', ctx=Store())], value=GeneratorExp(elt=Name(id='task', ctx=Load()), generators=[comprehension(target=Name(id='task', ctx=Store()), iter=Name(id='task_chunk', ctx=Load()), ifs=[Compare(left=Name(id='task', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Assign(targets=[Name(id='output_chunk', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='task_chunk', ctx=Load()), ctx=Load())]))), Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='output_chunk', ctx=Load())])), If(test=Name(id='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Completed '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='output', ctx=Load())]), conversion=-1), Constant(value=' out of '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tasks', ctx=Load())]), conversion=-1), Constant(value=' tasks')])]))])]), Return(value=Name(id='output', ctx=Load()))], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='get_asyncio_module', args=arguments(args=[arg(arg='show_progress', annotation=Name(id='bool', ctx=Load()))], defaults=[Constant(value=False)]), body=[If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='tqdm_asyncio', ctx=Load()))], orelse=[Assign(targets=[Name(id='module', ctx=Store())], value=Name(id='asyncio', ctx=Load()))]), Return(value=Name(id='module', ctx=Load()))], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='DEFAULT_NUM_WORKERS', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')])), AsyncFunctionDef(name='run_jobs', args=arguments(args=[arg(arg='jobs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Coroutine', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load()), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_progress', annotation=Name(id='bool', ctx=Load())), arg(arg='workers', annotation=Name(id='int', ctx=Load())), arg(arg='desc', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], defaults=[Constant(value=False), Name(id='DEFAULT_NUM_WORKERS', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value='Run jobs.\n\n    Args:\n        jobs (List[Coroutine]):\n            List of jobs to run.\n        show_progress (bool):\n            Whether to show progress bar.\n\n    Returns:\n        List[Any]:\n            List of results.\n    ')), Assign(targets=[Name(id='semaphore', ctx=Store())], value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='Semaphore', ctx=Load()), args=[Name(id='workers', ctx=Load())])), AsyncFunctionDef(name='worker', args=arguments(args=[arg(arg='job', annotation=Name(id='Coroutine', ctx=Load()))]), body=[AsyncWith(items=[withitem(context_expr=Name(id='semaphore', ctx=Load()))], body=[Return(value=Await(value=Name(id='job', ctx=Load())))])], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Name(id='Any', ctx=Load())), Assign(targets=[Name(id='pool_jobs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='worker', ctx=Load()), args=[Name(id='job', ctx=Load())]), generators=[comprehension(target=Name(id='job', ctx=Store()), iter=Name(id='jobs', ctx=Load()), is_async=0)])), If(test=Name(id='show_progress', ctx=Load()), body=[ImportFrom(module='tqdm.asyncio', names=[alias(name='tqdm_asyncio')], level=0), Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='tqdm_asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())], keywords=[keyword(arg='desc', value=Name(id='desc', ctx=Load()))])))], orelse=[Assign(targets=[Name(id='results', ctx=Store())], value=Await(value=Call(func=Attribute(value=Name(id='asyncio', ctx=Load()), attr='gather', ctx=Load()), args=[Starred(value=Name(id='pool_jobs', ctx=Load()), ctx=Load())])))]), Return(value=Name(id='results', ctx=Load()))], decorator_list=[Attribute(value=Name(id='dispatcher', ctx=Load()), attr='span', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))])
2024-11-17 10:31:06,727 - DEBUG - Found function definition: asyncio_module
2024-11-17 10:31:06,727 - DEBUG - Found function definition: asyncio_module
2024-11-17 10:31:06,727 - DEBUG - Found function definition: asyncio_module
2024-11-17 10:31:06,727 - DEBUG - Found function definition: asyncio_module
2024-11-17 10:31:06,728 - DEBUG - Extracting function calls from: asyncio_module
2024-11-17 10:31:06,728 - DEBUG - Extracting function calls from: asyncio_module
2024-11-17 10:31:06,728 - DEBUG - Extracting function calls from: asyncio_module
2024-11-17 10:31:06,728 - DEBUG - Extracting function calls from: asyncio_module
2024-11-17 10:31:06,728 - DEBUG - Function calls: []
2024-11-17 10:31:06,728 - DEBUG - Function calls: []
2024-11-17 10:31:06,728 - DEBUG - Function calls: []
2024-11-17 10:31:06,728 - DEBUG - Function calls: []
2024-11-17 10:31:06,728 - DEBUG - Function info: {'name': 'asyncio_module', 'args': ['show_progress'], 'returns': 'Any', 'docstring': None, 'decorators': [], 'calls': [], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,728 - DEBUG - Function info: {'name': 'asyncio_module', 'args': ['show_progress'], 'returns': 'Any', 'docstring': None, 'decorators': [], 'calls': [], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,728 - DEBUG - Function info: {'name': 'asyncio_module', 'args': ['show_progress'], 'returns': 'Any', 'docstring': None, 'decorators': [], 'calls': [], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,728 - DEBUG - Function info: {'name': 'asyncio_module', 'args': ['show_progress'], 'returns': 'Any', 'docstring': None, 'decorators': [], 'calls': [], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,728 - DEBUG - Found function definition: asyncio_run
2024-11-17 10:31:06,728 - DEBUG - Found function definition: asyncio_run
2024-11-17 10:31:06,728 - DEBUG - Found function definition: asyncio_run
2024-11-17 10:31:06,728 - DEBUG - Found function definition: asyncio_run
2024-11-17 10:31:06,729 - DEBUG - Extracting function calls from: asyncio_run
2024-11-17 10:31:06,729 - DEBUG - Extracting function calls from: asyncio_run
2024-11-17 10:31:06,729 - DEBUG - Extracting function calls from: asyncio_run
2024-11-17 10:31:06,729 - DEBUG - Extracting function calls from: asyncio_run
2024-11-17 10:31:06,729 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,729 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,729 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,729 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,729 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,729 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,729 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,729 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,729 - DEBUG - Found method call: run
2024-11-17 10:31:06,729 - DEBUG - Found method call: run
2024-11-17 10:31:06,729 - DEBUG - Found method call: run
2024-11-17 10:31:06,729 - DEBUG - Found method call: run
2024-11-17 10:31:06,729 - DEBUG - Found function call: RuntimeError
2024-11-17 10:31:06,729 - DEBUG - Found function call: RuntimeError
2024-11-17 10:31:06,729 - DEBUG - Found function call: RuntimeError
2024-11-17 10:31:06,729 - DEBUG - Found function call: RuntimeError
2024-11-17 10:31:06,730 - DEBUG - Function calls: ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError']
2024-11-17 10:31:06,730 - DEBUG - Function calls: ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError']
2024-11-17 10:31:06,730 - DEBUG - Function calls: ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError']
2024-11-17 10:31:06,730 - DEBUG - Function calls: ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError']
2024-11-17 10:31:06,730 - DEBUG - Function info: {'name': 'asyncio_run', 'args': ['coro'], 'returns': 'Any', 'docstring': 'Gets an existing event loop to run the coroutine.\n\nIf there is no existing event loop, creates a new one.', 'decorators': [], 'calls': ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError'], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,730 - DEBUG - Function info: {'name': 'asyncio_run', 'args': ['coro'], 'returns': 'Any', 'docstring': 'Gets an existing event loop to run the coroutine.\n\nIf there is no existing event loop, creates a new one.', 'decorators': [], 'calls': ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError'], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,730 - DEBUG - Function info: {'name': 'asyncio_run', 'args': ['coro'], 'returns': 'Any', 'docstring': 'Gets an existing event loop to run the coroutine.\n\nIf there is no existing event loop, creates a new one.', 'decorators': [], 'calls': ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError'], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,730 - DEBUG - Function info: {'name': 'asyncio_run', 'args': ['coro'], 'returns': 'Any', 'docstring': 'Gets an existing event loop to run the coroutine.\n\nIf there is no existing event loop, creates a new one.', 'decorators': [], 'calls': ['get_event_loop', 'run_until_complete', 'run', 'RuntimeError'], 'used_imports': [], 'used_variables': []}
2024-11-17 10:31:06,730 - DEBUG - Found function definition: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Found function definition: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Found function definition: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Found function definition: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Extracting function calls from: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Extracting function calls from: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Extracting function calls from: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Extracting function calls from: run_async_tasks
2024-11-17 10:31:06,730 - DEBUG - Found function call: asyncio_run
2024-11-17 10:31:06,730 - DEBUG - Found function call: asyncio_run
2024-11-17 10:31:06,730 - DEBUG - Found function call: asyncio_run
2024-11-17 10:31:06,730 - DEBUG - Found function call: asyncio_run
2024-11-17 10:31:06,731 - DEBUG - Found function call: _gather
2024-11-17 10:31:06,731 - DEBUG - Found function call: _gather
2024-11-17 10:31:06,731 - DEBUG - Found function call: _gather
2024-11-17 10:31:06,731 - DEBUG - Found function call: _gather
2024-11-17 10:31:06,731 - DEBUG - Found method call: apply
2024-11-17 10:31:06,731 - DEBUG - Found method call: apply
2024-11-17 10:31:06,731 - DEBUG - Found method call: apply
2024-11-17 10:31:06,731 - DEBUG - Found method call: apply
2024-11-17 10:31:06,731 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,731 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,731 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,731 - DEBUG - Found method call: get_event_loop
2024-11-17 10:31:06,731 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,731 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,731 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,731 - DEBUG - Found method call: run_until_complete
2024-11-17 10:31:06,731 - DEBUG - Found method call: gather
2024-11-17 10:31:06,731 - DEBUG - Found method call: gather
2024-11-17 10:31:06,731 - DEBUG - Found method call: gather
2024-11-17 10:31:06,731 - DEBUG - Found method call: gather
2024-11-17 10:31:06,732 - DEBUG - Found function call: _tqdm_gather
2024-11-17 10:31:06,732 - DEBUG - Found function call: _tqdm_gather
2024-11-17 10:31:06,732 - DEBUG - Found function call: _tqdm_gather
2024-11-17 10:31:06,732 - DEBUG - Found function call: _tqdm_gather
2024-11-17 10:31:06,732 - DEBUG - Found method call: gather
2024-11-17 10:31:06,732 - DEBUG - Found method call: gather
2024-11-17 10:31:06,732 - DEBUG - Found method call: gather
2024-11-17 10:31:06,732 - DEBUG - Found method call: gather
2024-11-17 10:31:06,732 - DEBUG - Function calls: ['asyncio_run', '_gather', 'apply', 'get_event_loop', 'run_until_complete', 'gather', '_tqdm_gather', 'gather']
2024-11-17 10:31:06,732 - DEBUG - Function calls: ['asyncio_run', '_gather', 'apply', 'get_event_loop', 'run_until_complete', 'gather', '_tqdm_gather', 'gather']
2024-11-17 10:31:06,732 - DEBUG - Function calls: ['asyncio_run', '_gather', 'apply', 'get_event_loop', 'run_until_complete', 'gather', '_tqdm_gather', 'gather']
2024-11-17 10:31:06,732 - DEBUG - Function calls: ['asyncio_run', '_gather', 'apply', 'get_event_loop', 'run_until_complete', 'gather', '_tqdm_gather', 'gather']
